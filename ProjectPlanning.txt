Context
 
 Nowadays, many applications handle personal info. To prevent unauthorised access to this personal info, most business make use of an authentication system. Larger business often opt to identify users based on a 'token', which has the advantage of being stateless, and being reusable for other web services.
 The entire process of entering credentials, receiving a token in return, and holding on to it carries some security concerns. As part of this research, we will attempt to answer some questions related to these concerns. Our main research question is thus as follows:
 
How can we develop and implement a secure authentication mechanism for an application service?

To answer this question, we will first attempt to answer the following series of smaller questions:

1. What is the most secure way to track user identity?
2. How can we establish a secure connection for exchanging information with the authentication mechanism?
3. How can we securely store passwords and/or other authentication details on the server?
4. What are the most secure algorithms for hashing authentication credentials?
5. What is the most secure way to segment the infrastructure of the authentication mechanism?
6. How can we test the security of the infrastructure of the authentication mechanism?

Strategies:
    - Workshop
        - Prototyping
        - Architecture sketching
    - Showroom
        - Benchmark test
        - Pitch
    - Lab
        - Security Test
        - Unit Test
    - Literature
        - Library research

Goals:
In the end, the goal is to have a secure authentication server and data storage that can be used for external web services.

Scope:
Within this project, we will first answer the aforementioned questions, and then proceed to develop the authentication mechanism and setup the infrastructure it will be hosted on. We will not make use of existing authentication mechanisms, nor will we develop a user friendly interface.

Deliverables:
After the goals have been realised, we will be able to deliver a fully functioning secure authentication server, with a secure data storage. Various documents will also result from this project.

Team:
Jesse Oosterwijk - Developer/Scrum Master
Mark Tempelaar - Developer
Twan Ophelders - Developer
Gijs Nat - Developer
Luuk Ottenhof - Developer/Project Leider

The team will be subdivided into 2 groups. Jesse, Gijs and Twan will attempt to answer question 3, 4 and 5, while Mark and Luuk will answer 1 and 2.

Global Planning:
Week 1 - 4: Orientation and definitation.
Week 5 - 8: Research
Week 6 - 16: Product Development
Week 6 - 18: Product testing

Test Environment:
We will test our components and infrastrucure locally

Risks:
During development we run the risk of not sufficiently complying with GDPR. We will try to mitigate this by allowing a user to delete their own information. The probability of not achieving this is low but the impact is high since failure to properly consider the law would make use of the final product unviable. 

Sprint planning:

Sprint 0: 20/02/2020 - 12/03/2020
    - Project plan & description
    - Define main & subquestions
    
Sprint 1: 12/03/2020 - 02/04/2020
    - Research subquestions
    - Architeture diagram
    
Sprint 2: 02/04/2020 - 23/04/2020

Sprint 3: 23/04/2020 - 14/05/2020

Sprint 4: 14/05/2020 - 04/06/2020

Sprint 5: 04/06/2020 - 25/06/2020


Subquestions:

Question 1: 

Question 2:

In order to establish a secure connection between a client and a server both sides send a token to confirm the identity of the other.

The client’s security package sends an opaque message containing a token and any other application protocol relevent information to the client, the client sends the message to the server and the server sends it to it’s security package. The client and server can’t interpret or edit the message. The security package interprets the token and confirms whether or not the client was authenticated.

The client receives the server’s token in a message, it retrieves the token from the message and uses the token in a call to it’s security package. The client then calls the security package again to confirm whether or not a secure connection has been established.[1]


Question 3:

How can we securely store passwords and/or other authentication details on the server?

In this chapter we will discuss the different approaches to storing passwords and compare their respective advantages and disadvantages in the context of our authentication mechanism.
Furthermore, we will discuss which of these different approaches will be implemented in our authentication mechanism and why this choice was made.
This chapter will also discuss where and with what technology passwords and/or other authentication details can be securely saved.
During this research, different sources will be consulted to bring us closer to the answer to the question above.
These will be referenced at the end of the chapter.

Different approaches

Location and technology of storage

Database security

Data segmentation & seperation



Conclusion


Question 4:

Question 5:

Question 6:


Sources:
[1]: https://docs.microsoft.com/en-us/windows/win32/secauthn/establishing-a-secure-connection-with-authentication
[2]: https://owasp.org/www-project-cheat-sheets/cheatsheets/Password_Storage_Cheat_Sheet